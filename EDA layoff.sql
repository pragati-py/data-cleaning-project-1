USE data_practice;

SELECT * FROM l2;

-- GETS THE MAXIMUM TOTAL LAYOFF AND PERCENTAGE LAYOFF
SELECT MAX(total_laid_off) , MAX(percentage_laid_off)
FROM l2;

-- SHOWS COMPANIES THAT ARE 100% LAID OFF WITH TOTAL LAYOFF FROM HIGHEST TO LOWEST
SELECT * FROM l2
WHERE percentage_laid_off=1
ORDER BY total_laid_off DESC;

-- SHOWS COMPANIES THAT ARE 100% LAID OFF WITH FUNDS FROM HIGHEST TO LOWEST
SELECT * FROM l2
WHERE percentage_laid_off=1
ORDER BY funds_raised_millions DESC;

-- GETS COMPANIES WITH TOTAL LAID OFF FROM HIGHEST TO LOWEST
SELECT company, SUM(total_laid_off)
FROM l2
GROUP BY company
ORDER BY 2 DESC;

-- SHOWS DATE WHEN EARLIEST AND LATEST LAID OFF TOOK PLACE
SELECT MIN(`date`), MAX(`date`)
FROM l2;

-- DISPLAYS INDUSTRIES WITH TOTAL LAID OFF FROM HIGHEST TO LOWEST
SELECT industry, SUM(total_laid_off)
FROM l2
GROUP BY industry
ORDER BY 2 DESC;

-- GETS COUNTRIES WITH TOTAL LAID OFF FROM HIGHEST TO LOWEST
SELECT country, SUM(total_laid_off)
FROM l2
GROUP BY country
ORDER BY 2 DESC;

-- DIPLAYS YEAR WITH TOTAL LAID OFF
SELECT YEAR(`date`), SUM(total_laid_off)
FROM l2
GROUP BY YEAR(`date`)
ORDER BY 1 DESC;

-- GETS STAGES OF COMPANIES WITH TOTAL LAID OFF FROM HIGHEST TO LOWEST
SELECT stage, SUM(total_laid_off)
FROM l2
GROUP BY stage
ORDER BY 2 DESC;

-- GETS COMPANIES WITH AVERAGE OF PERCENTAGE LAID OFF FROM HIGHEST TO LOWEST
SELECT company, AVG(percentage_laid_off)
FROM l2
GROUP BY company
ORDER BY 2 DESC;

-- DISPLAYING THE ROLLING TOTAL OF TOTAL LAID OFF WITH MONTH FROM EARLIEST TO LATEST
WITH Rolling_Total AS
(
SELECT SUBSTRING(`date`,1,7) AS `MONTH` , SUM(total_laid_off) AS total_off
FROM l2
WHERE SUBSTRING(`date`,1,7) IS NOT NULL
GROUP BY `MONTH`
ORDER BY 1 ASC
)

SELECT `MONTH`, total_off, SUM(total_off) OVER(ORDER BY `MONTH`) AS rolling_total
FROM Rolling_Total;

-- RANKING TOP 5 COMPANIES EVERY YEAR BASED ON THEIR LAYOFF COUNT
WITH Comapny_Year (comapny, year, total_layoff) AS 
(
SELECT company, YEAR(`date`),SUM(total_laid_off)
FROM l2
GROUP BY company, YEAR(`date`)
ORDER BY 3 DESC
), Company_Year_Rank AS
(
SELECT *,
DENSE_RANK() OVER(PARTITION BY year ORDER BY total_layoff DESC) AS Ranking
FROM Comapny_Year
WHERE year IS NOT NULL

)

SELECT * FROM Company_Year_Rank 
WHERE Ranking<=5;

